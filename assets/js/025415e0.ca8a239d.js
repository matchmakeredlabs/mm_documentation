"use strict";(self.webpackChunkuser_documentation=self.webpackChunkuser_documentation||[]).push([[2007],{7227:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var i=t(4848);function a({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,t),hidden:n,children:e})}},7601:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"knowledge_mgmt/settings","title":"/settings","description":"This endpoint allows you to store user-specific information, which currently includes match profiles and custom sets.","source":"@site/api/knowledge_mgmt/settings.mdx","sourceDirName":"knowledge_mgmt","slug":"/settings","permalink":"/mm_documentation/api/settings","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"/settings","slug":"/settings"},"sidebar":"apiSidebar","previous":{"title":"/comments","permalink":"/mm_documentation/api/comments"},"next":{"title":"/users","permalink":"/mm_documentation/api/users"}}');var r=t(4848),i=t(8453),a=t(9489),l=t(7227);const c={title:"/settings",slug:"/settings"},d="/settings",o={},h=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"GET - All Settings",id:"get---all-settings",level:2},{value:"Endpoint",id:"endpoint",level:3},{value:"Request",id:"request",level:3},{value:"Request Parameters",id:"request-parameters",level:4},{value:"Sample Request",id:"sample-request",level:4},{value:"Response",id:"response",level:3},{value:"Response Parameters",id:"response-parameters",level:4},{value:"Example Response",id:"example-response",level:4},{value:"GET - Settings by ID",id:"get---settings-by-id",level:2},{value:"Endpoint",id:"endpoint-1",level:3},{value:"Request",id:"request-1",level:3},{value:"Path Parameters",id:"path-parameters",level:4},{value:"Sample Request",id:"sample-request-1",level:4},{value:"Response",id:"response-1",level:3},{value:"Response Parameters",id:"response-parameters-1",level:4},{value:"Example Response",id:"example-response-1",level:4},{value:"POST - Create Settings",id:"post---create-settings",level:2},{value:"Endpoint",id:"endpoint-2",level:3},{value:"Request",id:"request-2",level:3},{value:"Request Body",id:"request-body",level:4},{value:"Request Parameters",id:"request-parameters-1",level:4},{value:"Sample Request",id:"sample-request-2",level:4},{value:"Response",id:"response-2",level:3},{value:"Response Parameters",id:"response-parameters-2",level:4},{value:"Example Response",id:"example-response-2",level:4},{value:"PUT - Update Settings Object",id:"put---update-settings-object",level:2},{value:"Request",id:"request-3",level:3},{value:"Path Parameters",id:"path-parameters-1",level:4},{value:"Request Body",id:"request-body-1",level:4},{value:"Request Parameters",id:"request-parameters-2",level:4},{value:"Sample Request",id:"sample-request-3",level:4},{value:"Response",id:"response-3",level:3},{value:"Response Parameters",id:"response-parameters-3",level:4},{value:"Example Response",id:"example-response-3",level:4},{value:"DELETE - Remove Settings Object",id:"delete---remove-settings-object",level:2},{value:"Request",id:"request-4",level:3},{value:"Path Parameters",id:"path-parameters-2",level:4},{value:"Sample Request",id:"sample-request-4",level:4},{value:"Response",id:"response-4",level:3},{value:"Response Parameters",id:"response-parameters-4",level:4},{value:"Example Response",id:"example-response-4",level:4}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"settings",children:"/settings"})}),"\n",(0,r.jsx)(n.p,{children:"This endpoint allows you to store user-specific information, which currently includes match profiles and custom sets."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#get---all-settings",children:"GET - All Settings"})}),(0,r.jsx)(n.td,{children:"Retrieve all settings objects."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#get---settings-by-id",children:"GET - Settings by ID"})}),(0,r.jsx)(n.td,{children:"Retrieve a specific comment by its ID."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#post---create-settings",children:"POST - Create Settings"})}),(0,r.jsx)(n.td,{children:"Create a new settings object."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#put---update-comment",children:"PUT - Update Settings Object"})}),(0,r.jsx)(n.td,{children:"Update a preexisting settings object by its ID."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"#delete---remove-settings",children:"DELETE"})}),(0,r.jsx)(n.td,{children:"Delete a specific settings object by its ID."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"get---all-settings",children:"GET - All Settings"}),"\n",(0,r.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GET https://matchmakeredlabs.net/api/settings\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns all settings objects if caller has system-wide admin ",(0,r.jsx)(n.code,{children:"ReadDescriptor"})," privilege."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, returns user's own settings object and all organization-specific settings objects for which the user has ",(0,r.jsx)(n.code,{children:"ReadDescriptor"})," privileges."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.h4,{id:"request-parameters",children:"Request Parameters"}),"\n",(0,r.jsx)(n.p,{children:"None required."}),"\n",(0,r.jsx)(n.h4,{id:"sample-request",children:"Sample Request"}),"\n",(0,r.jsxs)(a.A,{groupId:"get_all_settings",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],children:[(0,r.jsx)(l.A,{value:"curl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-curl",children:'curl \\\n-H "Authorization: Bearer $TOKEN" \\\n-X GET "https://matchmakeredlabs.net/api/settings"\n'})})}),(0,r.jsx)(l.A,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'async function getSettings() {\n    const response = await fetch("https://matchmakeredlabs.net/api/settings", {\n        method: "GET",\n        headers: {\n            \'Authorization\': `Bearer ${TOKEN}`\n        }\n    });\n    return response.json();\n}\n\ngetSettings().then(data => console.log(data));\n'})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests\n\ntoken = \"<your_token>\"\nurl = 'https://matchmakeredlabs.net/api/settings'\nheaders = {\n    'Authorization': f\"Bearer {token}\"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"response",children:"Response"}),"\n",(0,r.jsx)(n.h4,{id:"response-parameters",children:"Response Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsxs)(n.td,{children:['Always "settings_',(0,r.jsx)(n.strong,{children:"mainEntityId"}),'"']})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Always "settings"'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mainEntityId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The user or organization ID that created the settings object."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"matchProfiles"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"If it exists, all match profiles owned by the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customSets"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"If it exists, all custom sets owned by the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_canUpdate"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"True if the user has permission to update the settings object, false if not."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_mainEntityType"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Always "user" or "org"'})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"example-response",children:"Example Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "settings_user123",\n  "type": "settings",\n  "mainEntityId": "user123",\n  "matchProfiles": {\n    "testMatchProfile": {\n        "alg-w-cc": "2",\n        "alg-t-cc": "0",\n        "alg-w-cp": "0.49",\n        "alg-t-cp": "0",\n        "alg-w-pc": "0.5",\n        "alg-t-pc": "0",\n        "alg-w-pp": "0.86",\n        "alg-t-pp": "0.16",\n        "alg-w-k": "1",\n        "alg-t-k": "0.66",\n        "alg-w-c": "1",\n        "alg-t-c": "0",\n        "alg-w-p": "1",\n        "alg-t-p": "0",\n        "alg-w-d": "0.1",\n        "alg-t-d": "0"\n    }\n},\n  "customSets": {\n    "testCustomSet": {\n      "descriptors": [\n        {\n          "eleType": "cs",\n          "name": "Descriptor 1",\n          "url": "urn:dicax:TC.S",\n          "subject": "Science",\n          "description": "Test Collection A",\n          "identifier": "S",\n          "mainEntity": "urn:dicax:TC.S"\n        }\n      ]\n    }\n  },\n  "_canUpdate": true,\n  "_mainEntityType": "user"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"get---settings-by-id",children:"GET - Settings by ID"}),"\n",(0,r.jsx)(n.h3,{id:"endpoint-1",children:"Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GET https://matchmakeredlabs.net/api/settings/{settingsID}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can only be done on a user's own settings object or an organization's settings object for which the user has ",(0,r.jsx)(n.code,{children:"ReadDescriptor"})," privileges."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"request-1",children:"Request"}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"settingsID"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User or organization ID of the settings object to be retrieved."})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"sample-request-1",children:"Sample Request"}),"\n",(0,r.jsxs)(a.A,{groupId:"get_settings_by_id",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],children:[(0,r.jsx)(l.A,{value:"curl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-curl",children:'curl \\\n-H "Authorization: Bearer $TOKEN" \\\n-X GET "https://matchmakeredlabs.net/api/settings/user123"\n'})})}),(0,r.jsx)(l.A,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'async function getSettings(settingsId) {\n    const response = await fetch(`https://matchmakeredlabs.net/api/settings/${settingsId}`, {\n        method: "GET",\n        headers: {\n            \'Authorization\': `Bearer ${TOKEN}`\n        }\n    });\n    return response.json();\n}\n\ngetSettings("user123").then(data => console.log(data));\n'})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\n\ntoken = "<your_token>"\nsettings_id = "user123"\nurl = f\'https://matchmakeredlabs.net/api/settings/{settings_id}\'\nheaders = {\n    \'Authorization\': f"Bearer {token}"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"response-1",children:"Response"}),"\n",(0,r.jsx)(n.h4,{id:"response-parameters-1",children:"Response Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsxs)(n.td,{children:['Always "settings_',(0,r.jsx)(n.strong,{children:"mainEntityId"}),'"']})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Always "settings"'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mainEntityId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The user or organization ID that created the settings object."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"matchProfiles"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"If it exists, all match profiles owned by the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customSets"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"If it exists, all custom sets owned by the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_canUpdate"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"True if the user has permission to update the settings object, false if not."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_mainEntityType"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Always "user" or "org"'})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"example-response-1",children:"Example Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "settings_user123",\n  "type": "settings",\n  "mainEntityId": "user123",\n  "matchProfiles": {\n    "testMatchProfile": {\n        "alg-w-cc": "2",\n        "alg-t-cc": "0",\n        "alg-w-cp": "0.49",\n        "alg-t-cp": "0",\n        "alg-w-pc": "0.5",\n        "alg-t-pc": "0",\n        "alg-w-pp": "0.86",\n        "alg-t-pp": "0.16",\n        "alg-w-k": "1",\n        "alg-t-k": "0.66",\n        "alg-w-c": "1",\n        "alg-t-c": "0",\n        "alg-w-p": "1",\n        "alg-t-p": "0",\n        "alg-w-d": "0.1",\n        "alg-t-d": "0"\n    }\n},\n  "customSets": {\n    "testCustomSet": {\n      "descriptors": [\n        {\n          "eleType": "cs",\n          "name": "Descriptor 1",\n          "url": "urn:dicax:TC.S",\n          "subject": "Science",\n          "description": "Test Collection A",\n          "identifier": "S",\n          "mainEntity": "urn:dicax:TC.S"\n        }\n      ]\n    }\n  },\n  "_canUpdate": true,\n  "_mainEntityType": "user"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"post---create-settings",children:"POST - Create Settings"}),"\n",(0,r.jsx)(n.h3,{id:"endpoint-2",children:"Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"POST https://matchmakeredlabs.net/api/settings\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can be done for a user's own account or for any organization that the user has ",(0,r.jsx)(n.code,{children:"WriteDescriptor"})," privileges on."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"request-2",children:"Request"}),"\n",(0,r.jsx)(n.h4,{id:"request-body",children:"Request Body"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "mainEntityId": "user123",\n  "matchProfiles": {\n    "testMatchProfile": {\n        "alg-w-cc": "2",\n        "alg-t-cc": "0",\n        "alg-w-cp": "0.49",\n        "alg-t-cp": "0",\n        "alg-w-pc": "0.5",\n        "alg-t-pc": "0",\n        "alg-w-pp": "0.86",\n        "alg-t-pp": "0.16",\n        "alg-w-k": "1",\n        "alg-t-k": "0.66",\n        "alg-w-c": "1",\n        "alg-t-c": "0",\n        "alg-w-p": "1",\n        "alg-t-p": "0",\n        "alg-w-d": "0.1",\n        "alg-t-d": "0"\n    }\n},\n  "customSets": {\n    "testCustomSet": {\n      "descriptors": [\n        {\n          "eleType": "cs",\n          "name": "Descriptor 1",\n          "url": "urn:dicax:TC.S",\n          "subject": "Science",\n          "description": "Test Collection A",\n          "identifier": "S",\n          "mainEntity": "urn:dicax:TC.S"\n        }\n      ]\n    }\n  },\n  "_canUpdate": true,\n  "_mainEntityType": "user"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"request-parameters-1",children:"Request Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mainEntityId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User or organization ID of the settings object"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"matchProfiles"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"All match profiles to be associated with the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customSets"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"All custom sets to be associated with the mainEntityId."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"sample-request-2",children:"Sample Request"}),"\n",(0,r.jsxs)(a.A,{groupId:"create_settings",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],children:[(0,r.jsx)(l.A,{value:"curl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-curl",children:'curl \\\n-H "Authorization: Bearer $TOKEN" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    {\n        "mainEntityId": "user123",\n        "matchProfiles": {\n            "testMatchProfile": {\n                "alg-w-cc": "2",\n                "alg-t-cc": "0",\n                "alg-w-cp": "0.49",\n                "alg-t-cp": "0",\n                "alg-w-pc": "0.5",\n                "alg-t-pc": "0",\n                "alg-w-pp": "0.86",\n                "alg-t-pp": "0.16",\n                "alg-w-k": "1",\n                "alg-t-k": "0.66",\n                "alg-w-c": "1",\n                "alg-t-c": "0",\n                "alg-w-p": "1",\n                "alg-t-p": "0",\n                "alg-w-d": "0.1",\n                "alg-t-d": "0"\n            }\n        },\n        "customSets": {\n            "testCustomSet": {\n            "descriptors": [\n                {\n                "eleType": "cs",\n                "name": "Descriptor 1",\n                "url": "urn:dicax:TC.S",\n                "subject": "Science",\n                "description": "Test Collection A",\n                "identifier": "S",\n                "mainEntity": "urn:dicax:TC.S"\n                }\n            ]\n            }\n        },\n        "_canUpdate": true,\n        "_mainEntityType": "user"\n    }\n}\' \\\n-X POST "https://matchmakeredlabs.net/api/settings"\n'})})}),(0,r.jsx)(l.A,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'async function createSettings() {\n    const response = await fetch("https://matchmakeredlabs.net/api/settings", {\n        method: "POST",\n        headers: {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': `Bearer ${TOKEN}`\n        },\n        body: JSON.stringify({\n            {\n                "mainEntityId": "user123",\n                "matchProfiles": {\n                    "testMatchProfile": {\n                        "alg-w-cc": "2",\n                        "alg-t-cc": "0",\n                        "alg-w-cp": "0.49",\n                        "alg-t-cp": "0",\n                        "alg-w-pc": "0.5",\n                        "alg-t-pc": "0",\n                        "alg-w-pp": "0.86",\n                        "alg-t-pp": "0.16",\n                        "alg-w-k": "1",\n                        "alg-t-k": "0.66",\n                        "alg-w-c": "1",\n                        "alg-t-c": "0",\n                        "alg-w-p": "1",\n                        "alg-t-p": "0",\n                        "alg-w-d": "0.1",\n                        "alg-t-d": "0"\n                    }\n                },\n                "customSets": {\n                    "testCustomSet": {\n                    "descriptors": [\n                        {\n                        "eleType": "cs",\n                        "name": "Descriptor 1",\n                        "url": "urn:dicax:TC.S",\n                        "subject": "Science",\n                        "description": "Test Collection A",\n                        "identifier": "S",\n                        "mainEntity": "urn:dicax:TC.S"\n                        }\n                    ]\n                    }\n                },\n                "_canUpdate": true,\n                "_mainEntityType": "user"\n            }\n        })\n    });\n    return response.json();\n}\n\ncreateSettings().then(data => console.log(data));\n'})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\n\ntoken = "<your_token>"\nurl = \'https://matchmakeredlabs.net/api/settings\'\nheaders = {\n    \'Content-Type\': \'application/json\',\n    \'Authorization\': f"Bearer {token}"\n}\ndata = {\n    {\n        "mainEntityId": "user123",\n        "matchProfiles": {\n            "testMatchProfile": {\n                "alg-w-cc": "2",\n                "alg-t-cc": "0",\n                "alg-w-cp": "0.49",\n                "alg-t-cp": "0",\n                "alg-w-pc": "0.5",\n                "alg-t-pc": "0",\n                "alg-w-pp": "0.86",\n                "alg-t-pp": "0.16",\n                "alg-w-k": "1",\n                "alg-t-k": "0.66",\n                "alg-w-c": "1",\n                "alg-t-c": "0",\n                "alg-w-p": "1",\n                "alg-t-p": "0",\n                "alg-w-d": "0.1",\n                "alg-t-d": "0"\n            }\n        },\n        "customSets": {\n            "testCustomSet": {\n            "descriptors": [\n                {\n                "eleType": "cs",\n                "name": "Descriptor 1",\n                "url": "urn:dicax:TC.S",\n                "subject": "Science",\n                "description": "Test Collection A",\n                "identifier": "S",\n                "mainEntity": "urn:dicax:TC.S"\n                }\n            ]\n            }\n        },\n        "_canUpdate": true,\n        "_mainEntityType": "user"\n    }\n}\n\nresponse = requests.post(url, json=data, headers=headers)\nprint(response.json())\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"response-2",children:"Response"}),"\n",(0,r.jsx)(n.h4,{id:"response-parameters-2",children:"Response Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsxs)(n.td,{children:['Always "settings_',(0,r.jsx)(n.strong,{children:"mainEntityId"}),'"']})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"example-response-2",children:"Example Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "settings_user123"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"put---update-settings-object",children:"PUT - Update Settings Object"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can only be done on a user's own settings object or an organization's settings object for which the user has ",(0,r.jsx)(n.code,{children:"ReadDescriptor"})," privileges."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"request-3",children:"Request"}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"settingsID"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User or organization ID of the settings object to be updated."})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"request-body-1",children:"Request Body"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "mainEntityId": "user123",\n  "matchProfiles": {\n    "updatedMatchProfile": {\n        "alg-w-cc": "2",\n        "alg-t-cc": "0",\n        "alg-w-cp": "0.49",\n        "alg-t-cp": "0",\n        "alg-w-pc": "0.5",\n        "alg-t-pc": "0",\n        "alg-w-pp": "0.86",\n        "alg-t-pp": "0.16",\n        "alg-w-k": "1",\n        "alg-t-k": "0.66",\n        "alg-w-c": "1",\n        "alg-t-c": "0",\n        "alg-w-p": "1",\n        "alg-t-p": "0",\n        "alg-w-d": "0.1",\n        "alg-t-d": "0"\n    }\n},\n  "customSets": {\n    "updatedCustomSet": {\n      "descriptors": [\n        {\n          "eleType": "cs",\n          "name": "Descriptor 1",\n          "url": "urn:dicax:TC.S",\n          "subject": "Science",\n          "description": "Test Collection A",\n          "identifier": "S",\n          "mainEntity": "urn:dicax:TC.S"\n        }\n      ]\n    }\n  },\n  "_canUpdate": true,\n  "_mainEntityType": "user"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"request-parameters-2",children:"Request Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mainEntityId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User or organization ID of the settings object"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"matchProfiles"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"All match profiles to be associated with the mainEntityId."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customSets"})}),(0,r.jsx)(n.td,{children:"object array"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"All custom sets to be associated with the mainEntityId."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"sample-request-3",children:"Sample Request"}),"\n",(0,r.jsxs)(a.A,{groupId:"update_settings",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],children:[(0,r.jsx)(l.A,{value:"curl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-curl",children:'curl \\\n-H "Authorization: Bearer $TOKEN" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    {\n        "mainEntityId": "user123",\n        "matchProfiles": {\n            "updatedMatchProfile": {\n                "alg-w-cc": "2",\n                "alg-t-cc": "0",\n                "alg-w-cp": "0.49",\n                "alg-t-cp": "0",\n                "alg-w-pc": "0.5",\n                "alg-t-pc": "0",\n                "alg-w-pp": "0.86",\n                "alg-t-pp": "0.16",\n                "alg-w-k": "1",\n                "alg-t-k": "0.66",\n                "alg-w-c": "1",\n                "alg-t-c": "0",\n                "alg-w-p": "1",\n                "alg-t-p": "0",\n                "alg-w-d": "0.1",\n                "alg-t-d": "0"\n            }\n        },\n        "customSets": {\n            "updatedCustomSet": {\n            "descriptors": [\n                {\n                "eleType": "cs",\n                "name": "Descriptor 1",\n                "url": "urn:dicax:TC.S",\n                "subject": "Science",\n                "description": "Test Collection A",\n                "identifier": "S",\n                "mainEntity": "urn:dicax:TC.S"\n                }\n            ]\n            }\n        },\n        "_canUpdate": true,\n        "_mainEntityType": "user"\n    }\n}\' \\\n-X PUT "https://matchmakeredlabs.net/api/settings/user123"\n'})})}),(0,r.jsx)(l.A,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'async function updateSettings() {\n    const response = await fetch(`https://matchmakeredlabs.net/api/settings/${settingsId}`, {\n        method: "POST",\n        headers: {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': `Bearer ${TOKEN}`\n        },\n        body: JSON.stringify({\n            {\n                "mainEntityId": "user123",\n                "matchProfiles": {\n                    "updatedMatchProfile": {\n                        "alg-w-cc": "2",\n                        "alg-t-cc": "0",\n                        "alg-w-cp": "0.49",\n                        "alg-t-cp": "0",\n                        "alg-w-pc": "0.5",\n                        "alg-t-pc": "0",\n                        "alg-w-pp": "0.86",\n                        "alg-t-pp": "0.16",\n                        "alg-w-k": "1",\n                        "alg-t-k": "0.66",\n                        "alg-w-c": "1",\n                        "alg-t-c": "0",\n                        "alg-w-p": "1",\n                        "alg-t-p": "0",\n                        "alg-w-d": "0.1",\n                        "alg-t-d": "0"\n                    }\n                },\n                "customSets": {\n                    "updatedCustomSet": {\n                    "descriptors": [\n                        {\n                        "eleType": "cs",\n                        "name": "Descriptor 1",\n                        "url": "urn:dicax:TC.S",\n                        "subject": "Science",\n                        "description": "Test Collection A",\n                        "identifier": "S",\n                        "mainEntity": "urn:dicax:TC.S"\n                        }\n                    ]\n                    }\n                },\n                "_canUpdate": true,\n                "_mainEntityType": "user"\n            }\n        })\n    });\n    return response.json();\n}\n\nupdateSettings().then(data => console.log(data));\n'})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\n\ntoken = "<your_token>"\nsettings_id = "user123"\nurl = f\'https://matchmakeredlabs.net/api/settings/{settings_id}\'\nheaders = {\n    \'Content-Type\': \'application/json\',\n    \'Authorization\': f"Bearer {token}"\n}\ndata = {\n    {\n        "mainEntityId": "user123",\n        "matchProfiles": {\n            "updatedMatchProfile": {\n                "alg-w-cc": "2",\n                "alg-t-cc": "0",\n                "alg-w-cp": "0.49",\n                "alg-t-cp": "0",\n                "alg-w-pc": "0.5",\n                "alg-t-pc": "0",\n                "alg-w-pp": "0.86",\n                "alg-t-pp": "0.16",\n                "alg-w-k": "1",\n                "alg-t-k": "0.66",\n                "alg-w-c": "1",\n                "alg-t-c": "0",\n                "alg-w-p": "1",\n                "alg-t-p": "0",\n                "alg-w-d": "0.1",\n                "alg-t-d": "0"\n            }\n        },\n        "customSets": {\n            "updatedCustomSet": {\n            "descriptors": [\n                {\n                "eleType": "cs",\n                "name": "Descriptor 1",\n                "url": "urn:dicax:TC.S",\n                "subject": "Science",\n                "description": "Test Collection A",\n                "identifier": "S",\n                "mainEntity": "urn:dicax:TC.S"\n                }\n            ]\n            }\n        },\n        "_canUpdate": true,\n        "_mainEntityType": "user"\n    }\n}\n\nresponse = requests.put(url, json=data, headers=headers)\nprint(response.json())\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"response-3",children:"Response"}),"\n",(0,r.jsx)(n.h4,{id:"response-parameters-3",children:"Response Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsxs)(n.td,{children:['Always "settings_',(0,r.jsx)(n.strong,{children:"mainEntityId"}),'"']})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"example-response-3",children:"Example Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "settings_user123"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"delete---remove-settings-object",children:"DELETE - Remove Settings Object"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Can only be done on a user's own settings object or an organization's settings object for which the user has ",(0,r.jsx)(n.code,{children:"ReadDescriptor"})," privileges."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"request-4",children:"Request"}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters-2",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"settingsID"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User or organization ID of the settings object to be deleted."})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"sample-request-4",children:"Sample Request"}),"\n",(0,r.jsxs)(a.A,{groupId:"delete_settings",defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"JavaScript",value:"js"},{label:"Python",value:"python"}],children:[(0,r.jsx)(l.A,{value:"curl",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-curl",children:'curl \\\n-H "Authorization: Bearer $TOKEN" \\\n-X DELETE "https://matchmakeredlabs.net/api/settings/user123"\n'})})}),(0,r.jsx)(l.A,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'async function deleteSettings(settingsId) {\n    const response = await fetch(`https://matchmakeredlabs.net/api/settings/${settingsId}`, {\n        method: "DELETE",\n        headers: {\n            \'Authorization\': `Bearer ${TOKEN}`\n        }\n    });\n    return response.json();\n}\n\ndeleteSettings("user123").then(data => console.log(data));\n'})})}),(0,r.jsx)(l.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\n\ntoken = "<your_token>"\nsettings_id = "user123"\nurl = f\'https://matchmakeredlabs.net/api/settings/{settings_id}\'\nheaders = {\n    \'Authorization\': f"Bearer {token}"\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"response-4",children:"Response"}),"\n",(0,r.jsx)(n.h4,{id:"response-parameters-4",children:"Response Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsxs)(n.td,{children:['Always "settings_',(0,r.jsx)(n.strong,{children:"mainEntityId"}),'"']})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"example-response-4",children:"Example Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "settings_user123"\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},9489:(e,n,t)=>{t.d(n,{A:()=>T});var s=t(6540),r=t(4164),i=t(8630),a=t(4245),l=t(6347),c=t(6494),d=t(2814),o=t(5167),h=t(9900);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s}))}(t);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function j({value:e,tabValues:n}){return n.some(n=>n.value===e)}function x({queryString:e=!1,groupId:n}){const t=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[a,l]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!j({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i})),[d,o]=x({queryString:t,groupId:r}),[u,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,h.Dv)(n);return[t,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),m=(()=>{const e=d??u;return j({value:e,tabValues:i})?e:null})();(0,c.A)(()=>{m&&l(m)},[m]);return{selectedValue:a,selectValue:(0,s.useCallback)(e=>{if(!j({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),o(e),g(e)},[o,g,i]),tabValues:i}}var m=t(1062);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function v({className:e,block:n,selectedValue:t,selectValue:s,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),a=i[r].value;a!==t&&(c(n),s(a))},o=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:s})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:o,onClick:d,...s,className:(0,r.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===t);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function w(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,r.A)(i.G.tabs.container,"tabs-container",y.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(f,{...n,...e})]})}function T(e){const n=(0,m.A)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(n))}}}]);